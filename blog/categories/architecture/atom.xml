<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Architecture | Tail Spin]]></title>
  <link href="http://mairbek.github.com/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://mairbek.github.com/"/>
  <updated>2013-09-28T13:11:39+03:00</updated>
  <id>http://mairbek.github.com/</id>
  <author>
    <name><![CDATA[Mairbek Khadikov]]></name>
    <email><![CDATA[mkhadikov@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Graph Search Architecture Overview]]></title>
    <link href="http://mairbek.github.com/2013/02/16/graph-search-architecture-overview.html"/>
    <updated>2013-02-16T12:16:00+02:00</updated>
    <id>http://mairbek.github.com/2013/02/16/graph-search-architecture-overview</id>
    <content type="html"><![CDATA[<p>Back in 2009 me and my colleagues traveled to Moscow to visit Google Developers Day. It has been very first international development conference I've attended and the most excited one. As you may remember these days were Google Wave days. The hype was enormous and I had a chance to chat with Lars Rasmussen, one of the most influential people in the industry, a person who simply makes innovation happen. Well, just check out his <a href="http://en.wikipedia.org/wiki/Lars_Rasmussen_(software_developer)" title="Lars Rasmussen">resume</a>.</p>

<p>Now <a href="http://incubator.apache.org/wave/" title="Apache Wave">Wave is dead</a>, Lars works for <a href="http://facebook.com/" title="Facebook">Facebook</a>, and they've recently announced <a href="https://www.facebook.com/about/graphsearch" title="Graph Search">graph search</a>, a technology that allows you to search anything shared with you on Facebook. I've been interested in the technical details for a while and lately I've found Lars <a href="http://www.reddit.com/r/IAmA/comments/18jb6d/i_am_the_pointyhaired_engineering_director_for/" title="Answers on reddit">answering questions on Reddit</a>. So for those who are lazy to read whole Q/As I've written a quick summary of graph search architecture quoting author as much as possible.</p>

<p>At the back-end they have inverted-index system called <em>Unicorn</em> that is used to select nodes in the social graph based on edge-relationships to other nodes. <em>Unicorn</em> is akin to document search systems for other contexts like email, webpages, or files on your computer; but it also has some graph-centric features that make it especially useful for searching over the social graph.</p>

<p>All the search requests from users are sent to the index servers. <em>Hive</em>, <em>Hadoop</em>, and <em>HBase</em> are used to convert database contents into an inverted index on a regular basis, and then they push messages to index servers to have realtime updates from the base index.</p>

<p>When a user fires a search request the query gets translated two times. First NLP translator transforms natural language query to a semantic language that describes the interpretation of the natural language, and then further down in the stack they use an <em>s-expression</em> syntax to retrieve potential results from an inverted index.</p>

<p>Lars gave the following example. When user types</p>

<blockquote><p>My friends who live in Sydney, Australia</p></blockquote>

<p>it is interpreted to semantical form of</p>

<blockquote><p>intersect(friends(me), residents(110884905606108))</p></blockquote>

<p>and then to s-expression</p>

<blockquote><p>(and friend:767560056 city_to_user:110884905606108)</p></blockquote>

<p>If you have tried graph search you may noticed that you can't use a random query to search stuff, when you start typing system automatically suggests you matched queries and you can fire only suggested ones. How does it work? At the core of the system sits a <a href="http://en.wikipedia.org/wiki/Context-free_grammar" title="Context-Free Grammar">Context-Free Grammar</a> describing all the queries the system can understand. The grammar in general contains many different ways of expressing the same question. As a user types in the search field, a <a href="http://en.wikipedia.org/wiki/Parsing" title="Parsing">Parser</a> attempts to find the queries from the grammar that most closely matches what the user has typed, and displays those as suggestions in a drop-down below the search field.</p>

<p>As part of the parser they've developed <a href="http://en.wikipedia.org/wiki/Named-entity_recognition" title="Named Entity Recognition">named entity recognition engine</a>. For example, if you search for photos of <em>jane doe</em> the parser will figure out which Jane Doe you are looking for. When in doubt, they tend of course to pick the Jane who has the most friends in common with you.</p>

<p>Graph search is an exciting piece of technology as mush as Wave was, and it definitely pushed industry forward. I hope you've find my notes interesting, and by the way I guess Lars is still answering the questions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programs Should be Small]]></title>
    <link href="http://mairbek.github.com/2012/02/02/programs-should-be-small.html"/>
    <updated>2012-02-02T12:03:00+02:00</updated>
    <id>http://mairbek.github.com/2012/02/02/programs-should-be-small</id>
    <content type="html"><![CDATA[<h2>Evolution of software matters</h2>

<p>How big is the source code you are working on? How many developers do you have in your team? If you are going to add new feature tomorrow, how fast will you be able to do that?</p>

<p>Maintainability matters. Well, it matters in case if you're willing to build a successful applications evolving over the years. And if you would like to be able to quickly add new features you definitely want to see the developers spending most of the time on writing code and hacking on a new stuff.</p>

<p>Working mostly on enterprise projects I used to see multi-developer teams working on a single gigantic piece of software, usually built using one particular technology. This turns out to be inefficient and leads to unmaintainable code. A developer on a such project is forced to spend most of his time on trying to understand the way the current system works instead of adding concrete value. And I'm sorry, there is no value in reading pages of purely written legacy code. The only real value programmer can add is a new code.</p>

<p>Another disaster is the verification of the produced code. Getting instantaneous feedback by executing a newly written code is the essential part of the developer's productivity. Unfortunately running enterprise software is usually a real pain. You are forced to use rare application servers, monstrous databases, and in addition you have huge codebase with everlasting build time.</p>

<h2>Decomposition for the win</h2>

<p>Increasing program-to-developer ratio is the way of building things that keeps the developers productive and happy. Instead of having hordes of programmers working on one single codebase, split your system to a small programs that could be deployed independently. Beautiful reusable code should be extracted as a libraries and be maintained independently. <a href="http://tom.preston-werner.com/2011/11/22/open-source-everything.html">Open source that libraries</a> if possible and you'll get the feedback from the peers.</p>

<p>Writing small programs or services, if we talk about web apps, benefits in long term perspective. First of all small services are easy to reason about. The key is to stick with <a href="http://en.wikipedia.org/wiki/Open/closed_principle">open closed principle</a>, write services that do one thing, and do it well. It's easy to execute these services independently and see whether they work or not. For example for Gmail you might extract a service responsible for sending and receiving emails, you might have a separate service that does spam filtering, separate service for storing e-mails, a service that can apply filters and a standalone web-app that communicates with these services.</p>

<p>One big advantage of splitting you program is that you are no longer restricted to use one particular platform. We know that <em>ruby</em> or <em>node.js</em> make you really productive in writing web apps but their performance is pretty inefficient comparing to <em>C++</em> or <em>Java</em>. Since we are able to deploy services independently we can forget about monolithic <em>Java EE</em> and combine different technologies and for example build a web app with <em>rails</em> and backend services using <em>C++</em> and use some convenient protocol like <a href="http://code.google.com/p/protobuf/">Protobuf</a> or <a href="http://thrift.apache.org/">Apache Thrift</a> for communication.</p>

<p>Truth been told decomposition of the system is somewhat non-trivial. One thing is becoming obvious, well known layered architecture is going to ruin maintainability of your project. It's tempting to stick with classical enterprise approach and create a service for accessing the database, service that encapsulates caching, service that does business logic and a presentation service. But features are cross-cutted usually through these layers. So any new sophisticated feature will require changes in every layer. In addition most of the code will be responsible for converting messages from one format to another.</p>

<p>Software design and development is a pretty sophisticated activity and doesn't fully depend on how smart you are and how many books you've read. It's just so many thing you have to care about in order to achieve good quality solution. Keeping programs small is a great simple tool that allows you to reduce complexity of the solution and results in clean design and improved developers productivity.</p>
]]></content>
  </entry>
  
</feed>
