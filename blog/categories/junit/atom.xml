<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JUnit | Tail Spin]]></title>
  <link href="http://mkhadikov.com/blog/categories/junit/atom.xml" rel="self"/>
  <link href="http://mkhadikov.com/"/>
  <updated>2013-05-15T13:04:45+03:00</updated>
  <id>http://mkhadikov.com/</id>
  <author>
    <name><![CDATA[Mairbek Khadikov]]></name>
    <email><![CDATA[mkhadikov@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Новинки JUnit. Категории.]]></title>
    <link href="http://mkhadikov.com/2011/03/23/junit.html"/>
    <updated>2011-03-23T13:25:00+02:00</updated>
    <id>http://mkhadikov.com/2011/03/23/junit</id>
    <content type="html"><![CDATA[<p>В последнее время во всех проектах где я принимаю участие не обходится без автоматизированного тестирования. Везде есть unit тесты, плюс разработку часто сопровождают попытки покрыть код тестами на <em>Selenium</em>.</p>

<p>Первый вопрос который стоит перед командой при написании автоматизированных тестов -- как мы будем запускать тесты? Точнее -- какой фреймворк для тестирования нам выбрать? Если мы программируем на <em>Java</em>, выбор не велик. <em>JUnit</em> или <em>TestNG</em>.</p>

<p>Помню, когда мы начинали заниматься функциональными тестами на нашем последнем проекте, мы долго решали что же выбрать. Победил TestNG. Легкость создания test suit'a, возможность группировать тесты и запускать их параллельно -- вот что определило наш выбор. В тот момент я подписался на интересные блоги и рассылки связанные с тестированием, и через некоторое время обнаружил, что JUnit активно развивается и догоняет TestNG по функциональности, при этом превосходит его в продуманности API.</p>

<p>Так, в JUnit начиная с версии 4.8 появился механизм для метки и группировки тестов, под названием Categories.</p>

<p>Процесс группировки тестов в JUnit до появления категорий можно стравнить с организацией писем в Microsoft Outlook. Мы можем группировать тест методы в классы, а классы в пакеты.</p>

<p>Теперь, с помощью категорий, группировка тестов похожа на группировку писем в GMail.</p>

<p>Представляются категории в виде java интерфейсов, что дает приемущества по сравнению с группами в TestNG. В отличии от строковых констант коими являются группы, мы можем переименовывать категории в IDE, плюс есть возможность построить йерархии категорий, что дает нам гибкость в организации тестов.</p>

<p>Предположим, что у нас есть 4 категории: SmokeTest говорит что наш тест - смоук тест, <code>BrokenTest</code> показывает, что тест тестирует поломанный функционал, а с помощью <code>FastTest</code> и <code>SlowTest</code> мы помечаем тесты по времени выполнения.</p>

<p>``` java Categories
public interface SmokeTest {}</p>

<p>public interface BrokenTest {}</p>

<p>public interface FastTest {}</p>

<p>public interface SlowTest {}
```
Допустим у нас есть два тест класса с помеченными методами:</p>

<p>``` java Some Smoke Test
@Category(SmokeTest.class)
public class SomeSmokeTests {
  @Test
  @Category(FastTest.class)
  public void someFastTest() {</p>

<pre><code>// test something
</code></pre>

<p>  }</p>

<p>  @Test
  @Category(SlowTest.class)
  public void someReallySlowTest() {</p>

<pre><code>// test something
</code></pre>

<p>  }
}
```</p>

<p>``` java Some Test Case
public class SomeTestCase {</p>

<p>  @Test
  @Category({SmokeTest.class, FastTest.class})
  public void fastSmokeTest() {</p>

<pre><code>// test something
</code></pre>

<p>  }</p>

<p>  @Test
  @Category({SmokeTest.class, FastTest.class, BrokenTest.class})
  public void fastBrokenSmokeTest() {</p>

<pre><code>// test something
</code></pre>

<p>  }</p>

<p>  @Test
  @Category({SmokeTest.class, SlowTest.class})
  public void slowSmokeTest() {</p>

<pre><code>// test something
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>С помощью категорий мы можем построить test suite, который будет запускать быстрые smoke тесты с работающим функционалом:</p>

<p><code>java Test Suite
@RunWith(Categories.class)
@IncludeCategory(SmokeTest.class, FastTest.class)
@ExcludeCategory(BrokenTest.class)
@SuiteClasses(SomeSmokeTests.class, SomeTestCase.class)
public class RunFastSmokeTestCases {}
</code></p>

<p>Правда, с увеличением количества классов в suite, конфигурация получаеться громоздкой, а куча аннотаций никак не добавляет читабельности коду.</p>

<p>К счастью эта проблема решается с помощью библиотеки [junit-suite-configurator][1]. Так выглядит конфигурация эта же конфигурация написанная с ее помощью:</p>

<p>``` java junit-suite-configurator
@RunWith(Suite.Configuration.class)
public class Suite {</p>

<p>  public static class Configuration extends AbstractConfiguration {</p>

<p>  public Configuration(Class testClass) {</p>

<pre><code>super(testClass);
</code></pre>

<p>  }</p>

<p>  @Override
  protected void configure() {</p>

<pre><code>run(classes(SomeSmokeTests.class, SomeTestCase.class))
  .filter(includeCategories(SmokeTest.class, FastTest.class))
  .filter(excludeCategories(BrokenTest.class))
    .applyRule(new Rule1())
).invokeIn(singleThread());
</code></pre>

<p>  }
 }
}
```</p>
]]></content>
  </entry>
  
</feed>
