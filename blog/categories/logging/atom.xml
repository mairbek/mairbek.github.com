<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Logging | Tail Spin]]></title>
  <link href="http://mairbek.github.com/blog/categories/logging/atom.xml" rel="self"/>
  <link href="http://mairbek.github.com/"/>
  <updated>2013-02-24T13:56:33+02:00</updated>
  <id>http://mairbek.github.com/</id>
  <author>
    <name><![CDATA[Mairbek Khadikov]]></name>
    <email><![CDATA[mkhadikov@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Logging Gotcha (Rus)]]></title>
    <link href="http://mairbek.github.com/2012/01/21/logging-gotcha.html"/>
    <updated>2012-01-21T13:02:00+02:00</updated>
    <id>http://mairbek.github.com/2012/01/21/logging-gotcha</id>
    <content type="html"><![CDATA[<p>Любое мало-мальски уважающее себя приложение не обходится без логгирования. Конечно, ведь иначе работа аппликухи в продакшне превращается в черный ящик.</p>

<p>Современные библиотеки позволяют сохранять информацию на различных уровнях логгирования. В проектах, в которых я участвовал, обычно используется четыре уровня логгирования:</p>

<ul>
<li>ERROR -- сюда выводится информация о критичных ошибках в системе.</li>
<li>WARN -- используется для вывода не критичных, но все же некорректных сиптомов неправльной работы приложения</li>
<li>INFO -- используется для вывода интересных событий происходлящих в системе</li>
<li>DEBUG -- детальныая информация о том, что происходит с системой. обычно используется при разработке либо при отладке.</li>
</ul>


<p>Обычно запись в лог выглядит довольно просто:</p>

<p><code>java
log.error("SOMETHING REALLY BAD HAPPENED")
log.warn("Something bad happened")
log.info("Startup")
log.debug("Processing request" + request)
</code></p>

<p>Уровни логгирования легко конфигурируются, так что мы можем наблюдать debug информацию при разработке и видеть чистый лог в продакшне.</p>

<p>До сих пор, строки кода в open source библиотеках вида:</p>

<p>``` java
if (log.isDebugEnabled()) {</p>

<pre><code>log.debug("Processing request" + request);
</code></pre>

<p>}
```</p>

<p>вызывали недоумения: зачем это нужно, ведь запись в лог будет лишь при включенном дебаге, соответсвенно проверка влюченности дебага попахивает излишеством.</p>

<p>Однако, недавно я обнаружил, что подход без использования проверки влюченности уровня логгирования несет недостатки о которых мне раньше не приходилось задумываться.</p>

<p>Очень часто во время вывода в <em>debug</em> строки конкатенируются. И конкатенируются они независимо от того влючен дебаг или нет. Это во-первых приводит к тому, что создаются лишние строки что приводит к большим вызовам GC.</p>

<p>Во-вторых, операция <em>toString</em> может занимать продолжительное количество времени, и как показала недавняя история до 15% времени тормозящего метода.</p>

<p>Получается писать проверку влюченности уровня необходимо. Но не удобно. Количество строчек кода для записи в лог увеличивается в три раза.</p>

<p>Однако, если в проекте используется библиотека логирования <em>slf4j</em>, можно обойтись малой кровью используя шаблоны в строках. Как это работает:</p>

<p>Вместо конкатенации строк при логировании</p>

<p><code>java
log.debug("Processed request " + request + " sending response " + response);
</code></p>

<p>писать</p>

<p><code>java
log.debug("Processed request {} sending response {}", request, response);
</code></p>
]]></content>
  </entry>
  
</feed>
